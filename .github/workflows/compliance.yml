name: Compliance

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      BASE_URL:
        description: "Base URL of the deployed site to snapshot (e.g., https://example.com)"
        required: false
        default: ""
      VERCEL_TOKEN:
        description: "Vercel token (use repo secret/variable in real runs; input here for manual dispatch/testing)"
        required: false
        default: ""
      VERCEL_ORG_ID:
        description: "Vercel org id"
        required: false
        default: ""
      VERCEL_PROJECT_ID:
        description: "Vercel project id"
        required: false
        default: ""
      VERCEL_BYPASS_TOKEN:
        description: "Vercel Protection Bypass token for preview/protected deployments"
        required: false
        default: ""

jobs:
  predeploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies (if package.json present)
        run: |
          if [ -f package.json ]; then npm ci || npm i; else echo "No package.json"; fi

      - name: Pre-Flight
        run: bash scripts/preflight.sh

      - name: Generate SBOM
        run: node scripts/generate-sbom.js

      - name: Sign SBOM (stub)
        run: node scripts/sign-sbom.js

      - name: Summarize milestones
        run: node scripts/summarize-milestones.js && cat .reports/milestones-summary.md >> compliance-summary.md || true

      - name: Compliance rollup
        run: node scripts/compliance-summary.js | tee compliance-summary.md

      - name: Quadrinary checks
        run: node scripts/compliance-quadrinary.js && if [ -f .reports/final-certificate.md ]; then cat .reports/final-certificate.md >> compliance-summary.md; fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: compliance-artifacts
          path: |
            .reports/**
            reports/sbom/**
            compliance-summary.md

      - name: Append to job summary
        run: |
          echo "## Compliance Summary" >> $GITHUB_STEP_SUMMARY
          cat compliance-summary.md >> $GITHUB_STEP_SUMMARY

  deploy:
    runs-on: ubuntu-latest
    needs: predeploy
    outputs:
      deployment_url: ${{ steps.deploy.outputs.url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Vercel CLI
        run: npm i -g vercel@latest

      - name: Prepare Vercel env
        run: |
          echo "VERCEL_TOKEN=${{ github.event.inputs.VERCEL_TOKEN != '' && github.event.inputs.VERCEL_TOKEN || vars.VERCEL_TOKEN }}" >> $GITHUB_ENV
          echo "VERCEL_ORG_ID=${{ github.event.inputs.VERCEL_ORG_ID != '' && github.event.inputs.VERCEL_ORG_ID || vars.VERCEL_ORG_ID }}" >> $GITHUB_ENV
          echo "VERCEL_PROJECT_ID=${{ github.event.inputs.VERCEL_PROJECT_ID != '' && github.event.inputs.VERCEL_PROJECT_ID || vars.VERCEL_PROJECT_ID }}" >> $GITHUB_ENV

      - name: Vercel pull env (prod)
        run: |
          vercel pull --yes --environment=production --token "$VERCEL_TOKEN" --cwd apps/gtek-web

      - name: Vercel build (prod)
        run: |
          vercel build --prod --token "$VERCEL_TOKEN" --cwd apps/gtek-web

      - name: Vercel deploy (prod)
        id: deploy
        run: |
          URL=$(vercel deploy --prebuilt --prod --token "$VERCEL_TOKEN" --cwd apps/gtek-web)
          echo "Deployed to: $URL"
          echo "url=$URL" >> $GITHUB_OUTPUT

      - name: Append deploy to job summary
        run: |
          echo "## Deployment" >> $GITHUB_STEP_SUMMARY
          echo "- URL: ${{ steps.deploy.outputs.url }}" >> $GITHUB_STEP_SUMMARY

  postdeploy:
    runs-on: ubuntu-latest
    needs: [predeploy, deploy]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Postdeploy snapshot
        env:
          BASE_URL: ${{ github.event.inputs.BASE_URL != '' && github.event.inputs.BASE_URL || needs.deploy.outputs.deployment_url != '' && needs.deploy.outputs.deployment_url || vars.BASE_URL }}
        run: node scripts/postdeploy.js

      - name: Post-Flight
        env:
          BASE_URL: ${{ github.event.inputs.BASE_URL != '' && github.event.inputs.BASE_URL || needs.deploy.outputs.deployment_url != '' && needs.deploy.outputs.deployment_url || vars.BASE_URL }}
          VERCEL_BYPASS_TOKEN: ${{ github.event.inputs.VERCEL_BYPASS_TOKEN != '' && github.event.inputs.VERCEL_BYPASS_TOKEN || vars.VERCEL_BYPASS_TOKEN }}
        run: bash scripts/postflight.sh || true

      - name: Upload postdeploy report
        uses: actions/upload-artifact@v4
        with:
          name: postdeploy-artifacts
          path: |
            .reports/postdeploy-*.json

      - name: Append postdeploy to job summary
        run: |
          echo "## Postdeploy Snapshot" >> $GITHUB_STEP_SUMMARY
          if ls .reports/postdeploy-*.json 1> /dev/null 2>&1; then
            jq -r '"- Base URL: \(.baseUrl // "n/a")\n- Health: \(.snapshots.health.status // "n/a")\n- Governance/Audit: \(.snapshots.governanceAudit.status // "n/a")\n- Governance/Milestones: \(.snapshots.governanceMilestones.status // "n/a")"' .reports/postdeploy-*.json | head -n 20 >> $GITHUB_STEP_SUMMARY || true;
          else
            echo "- No postdeploy report found" >> $GITHUB_STEP_SUMMARY
          fi
            echo "- Analytics: $([ \"${ANALYTICS_STATUS:-1}\" -eq 0 ] && echo '✅ detected' || echo '⚠️ missing')" >> $GITHUB_STEP_SUMMARY

  e2e-smoke:
    runs-on: ubuntu-latest
    needs: [postdeploy, deploy]
    env:
      BASE_URL: ${{ github.event.inputs.BASE_URL != '' && github.event.inputs.BASE_URL || needs.deploy.outputs.deployment_url != '' && needs.deploy.outputs.deployment_url || vars.BASE_URL }}
      VERCEL_BYPASS_TOKEN: ${{ github.event.inputs.VERCEL_BYPASS_TOKEN != '' && github.event.inputs.VERCEL_BYPASS_TOKEN || vars.VERCEL_BYPASS_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Use PNPM if available, else NPM
        id: pm
        run: |
          if [ -f pnpm-lock.yaml ]; then echo "pm=pnpm" >> $GITHUB_OUTPUT; elif [ -f package-lock.json ]; then echo "pm=npm" >> $GITHUB_OUTPUT; else echo "pm=npm" >> $GITHUB_OUTPUT; fi

      - name: Install dependencies
        run: |
          if [ "${{ steps.pm.outputs.pm }}" = "pnpm" ]; then npm i -g pnpm && pnpm install; else npm ci || npm i; fi

      - name: Install Playwright browsers
        run: |
          if [ "${{ steps.pm.outputs.pm }}" = "pnpm" ]; then pnpm exec playwright install --with-deps; else npx playwright install --with-deps; fi

      - name: Log BASE_URL
        run: |
          echo "Running e2e smoke against: ${BASE_URL:-http://localhost:3000}"

      - name: Run Playwright tests
        run: |
          if [ "${{ steps.pm.outputs.pm }}" = "pnpm" ]; then \
            pnpm exec playwright test --config=playwright.config.ts --retries=2 --timeout=90000; \
          else \
            npx playwright test --config=playwright.config.ts --retries=2 --timeout=90000; \
          fi

      - name: Upload Playwright report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: |
            playwright-report/**
            test-results/**

      - name: Append e2e smoke to job summary
        if: always()
        run: |
          echo "## E2E Smoke" >> $GITHUB_STEP_SUMMARY
          echo "- BASE_URL: ${BASE_URL:-http://localhost:3000}" >> $GITHUB_STEP_SUMMARY
          RESULT="${{ job.status }}"
          echo "- Result: $([[ \"$RESULT\" = \"success\" ]] && echo \"✅ Passed\" || echo \"⚠️ Completed with failures\")" >> $GITHUB_STEP_SUMMARY
          if command -v jq >/dev/null 2>&1 && [ -f playwright-report/report.json ]; then \
            PASSES=$(jq '[.suites[]? | .. | objects | select(has("status")) | select(.status=="passed")] | length' playwright-report/report.json); \
            FAILS=$(jq '[.suites[]? | .. | objects | select(has("status")) | select(.status=="failed")] | length' playwright-report/report.json); \
            SKIPS=$(jq '[.suites[]? | .. | objects | select(has("status")) | select(.status=="skipped")] | length' playwright-report/report.json); \
            echo "- Tests: ✅ $PASSES, ❌ $FAILS, ⏭️ $SKIPS" >> $GITHUB_STEP_SUMMARY; \
          fi
